name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write # Ensure write access to the repository

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository in detached HEAD state (due to the tag trigger)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all history and tags are fetched

      # Set up Node.js environment for standard-version
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the project (replace this with your actual build command)
      - name: Build project
        run: npm run build

      # Publish to Chromatic
      - name: Publish to Chromatic
        uses: chromaui/action@latest
        with:
          projectToken: ${{ secrets.CHROMATIC_TOKEN }}
          buildScriptName: build-storybook

      # Create a .zip file of the build artifacts
      - name: Create asset.zip
        run: zip -r asset.zip ./dist # Adjust ./dist to your actual build folder

      # Create a .tar.gz file of the build artifacts
      - name: Create asset.tar.gz
        run: tar -czvf asset.tar.gz ./dist # Adjust ./dist to your actual build folder

      # Upload build artifacts for later steps
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            asset.zip
            asset.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout the code again to access the tag
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all history and tags are fetched

      # Create a GitHub release using the correct tag
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }} # Use PAT for release creation
        with:
          tag_name: ${{ github.ref_name }} # This will capture the semver tag name (e.g., v1.0.1)
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      # Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./ # Download both zip and tar.gz files to the current directory

      # Upload the asset.zip to the release
      - name: Upload asset.zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }} # Use PAT for uploading assets
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./asset.zip
          asset_name: asset.zip
          asset_content_type: application/zip

      # Upload the asset.tar.gz to the release
      - name: Upload asset.tar.gz to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }} # Use PAT for uploading assets
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./asset.tar.gz
          asset_name: asset.tar.gz
          asset_content_type: application/gzip
